#! /usr/bin/env bash

set -e
[ -n "$PYENV_DEBUG" ] && set -x

if [ -z "$PYENV_ROOT" ]; then
    PYENV_ROOT="${HOME}/.pyenv"
fi

backup_files() {
    SUB="pyenv-multiuser"
    for filename in ${ALTER_FILES[@]}; do
        if [[ "$filename" == *"$SUB"* ]]; then
            continue
        fi

        backup="$(echo $filename | sed 's/\//__/g')"
        echo "Backing up $filename -> $backup"
        cp $filename "${PYENV_ROOT}/plugins/pyenv-multiuser/backup/$backup"
    done
}

restore_files() {
    MU="$(pyenv root)/plugins/pyenv-multiuser/backup"
    for filename in $(ls "$(pyenv root)/plugins/pyenv-multiuser/backup"); do
        restore=$(echo $filename | sed 's/__/\//g')
        echo "Restoring $filename -> $restore"
        cp "$MU/$filename" $restore
    done
}

alter_files() {
    SUB="pyenv-multiuser"
    for filename in ${ALTER_FILES[@]}; do
        if [[ "$filename" == *"$SUB"* ]]; then
            continue
        fi

        echo "Altering $filename"
        sed -i'' 's/${PYENV_ROOT}\/shims/${PYENV_LOCAL_SHIM}/g' $filename
    done
}

clean_backups() {
    BACKUP="$(pyenv root)/plugins/pyenv-multiuser/backup"
    rm "${BACKUP}/"*
}

update_multiuser() {
    STATUS=0
    echo "Restoring backups ..."
    restore_files
    clean_backups

    echo "Performing update ..."
    pyenv update
    STATUS="$?"

    if [ "$STATUS" != "0" ]; then
        return $STATUS
    fi

    # rescan to find the files that need to be changed
    ALTER_FILES=$(grep -lr '${PYENV_ROOT}/shims' $PYENV_ROOT)
    echo "Performing file backup ..."
    backup_files

    echo "Performing file alterations ..."
    alter_files
}

setup_multiuser() {
    if [ -e "${PYENV_ROOT}/plugins/pyenv-multiuser/setup.true" ]
    then
        return 1
    fi

    # scan for the files that need changed
    ALTER_FILES=$(grep -lr '${PYENV_ROOT}/shims' $PYENV_ROOT)
    echo "Performing file backup ..."
    backup_files

    echo "Performing file alterations ..."
    alter_files

    # setup a file to check for to prevent double setups
    echo "true" > "${PYENV_ROOT}/plugins/pyenv-multiuser/setup.true"
    return 0
}

setup_shim_dir() {
    if [ ! -d "$PYENV_LOCAL_SHIM" ]; then
        echo -n "Directory '$PYENV_LOCAL_SHIM' does not exist. Would you like to create it now? [Y/n] "
        read YN
        YN=${YN:-y}

        case "$YN" in
            y | Y)
                mkdir $PYENV_LOCAL_SHIM
                ;;
            *)
                echo "You will need to create '$PYENV_LOCAL_SHIM' manually"
                ;;
        esac
    fi
}

user_init() {
    SHIM_DIR=$1
    if [ -x "$SHIM_DIR" ]; then
        SHIM_DIR="$HOME/.pyenv_local_shim"
    fi

    if [ -z "$PYENV_LOCAL_SHIM" ]; then
        echo -n "PYENV_LOCAL_SHIM not set. Would you like to use '$SHIM_DIR'? [Y/n] "
        read USE_DEFAULT
        USE_DEFAULT=${USE_DEFAULT:-y}

        case "$USE_DEFAULT" in
            y | Y)
                echo "# Add the following to your profile"
                echo "export PYENV_LOCAL_SHIM=$SHIM_DIR"
                echo
                PYENV_LOCAL_SHIM="$SHIM_DIR"
                export PYENV_LOCAL_SHIM
                setup_shim_dir $SHIM_DIR
                ;;

            *)
                echo "# Add the following to your profile and replace '<PATH>' with your desired location path for your local shim directory"
                echo "export PYENV_LOCAL_SHIM=<PATH>"
                echo
        esac
    fi

    echo "# Example Profile Setup"
    echo '# export PYENV_LOCAL_SHIM="$HOME/.pyenv_local_shim"'
    echo '# export PATH="$PYENV_LOCAL_SHIM:$HOME/.pyenv/bin:$PATH"'
    echo '# eval "$(pyenv virtualenv-init -)"'
}

uninstall() {
    echo -n "You are about to uninstall pyenv-multiuser. Are you sure you want to do this? [y/N] "
    read YN
    YN=${YN:-n}

    case "$YN" in
        y | Y)
            echo "Uninstalling pyenv-multiuser ..."
            restore_files

            echo "Removing plugin ..."
            rm -rf "$(pyenv root)/plugins/pyenv-multiuser"
            ;;
    esac
}

main() {
    shopt -s nullglob
    CMD=$1

    case "$CMD" in
        setup)
            RET=$(setup_multiuser)
            if [ $RET > 0 ]
            then
                echo "[$RET] pyenv-multiuser already setup. This only needs performed once."
            fi
            ;;

        init)
            user_init $2
            ;;

        update)
            if [ ! -d "$(pyenv root)/plugins/pyenv-update" ]; then
                echo "The pyenv-update plugin is not installed."
                exit 0
            fi

            STATUS=$(update_multiuser)
            ;;

        uninstall)
            uninstall
            ;;

        *)
            echo "USAGE: pyenv multiuser [option]"
            echo "  OPTIONS:"
            echo "      setup        : used initialize the multiuser setup. Should only need done once per install"
            echo "      init         : initialize the shim path at the individual user level"
            echo "                     Can take in an optional directory path to use for the shims directory"
            echo "      update       : perform an update of pyenv accounting for the multiuser setup"
            echo "      uninstall    : uninstall the pyenv-multiuser plugin"
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
    shopt -s nullglob
    main "$1"
    if [ $? -gt 0 ]
    then
        shopt -u nullglob
        exit 1
    fi
    shopt -u nullglob
fi
