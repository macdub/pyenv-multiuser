#! /usr/bin/env bash

set -e
[ -n "$PYENV_DEBUG" ] && set -x

if [ -z "$PYENV_ROOT" ]; then
    PYENV_ROOT="${HOME}/.pyenv"
fi

ALTER_FILES=$(grep -lr '${PYENV_ROOT}/shims' $PYENV_ROOT)

backup_files() {
    SUB="pyenv-multiuser"
    for filename in ${ALTER_FILES[@]}; do
        if [[ "$filename" == *"$SUB"* ]]; then
            continue
        fi

        backup="$(echo $filename | sed 's/\//__/g')"
        echo "Backing up $filename -> $backup"
        cp $filename "${PYENV_ROOT}/plugins/pyenv-multiuser/backup/$backup"
    done
}

restore_files() {
    MU="$(pyenv root)/plugins/pyenv-multiuser/backup"
    for filename in $(ls "$(pyenv root)/plugins/pyenv-multiuser/backup"); do
        restore=$(echo $filename | sed 's/__/\//g')
        echo "Restoring $filename -> $restore"
        cp "$MU/$filename" $restore
    done
}

alter_files() {
    SUB="pyenv-multiuser"
    for filename in ${ALTER_FILES[@]}; do
        if [[ "$filename" == *"$SUB"* ]]; then
            continue
        fi

        echo "Altering $filename"
        sed -i'' 's/${PYENV_ROOT}\/shims/${PYENV_LOCAL_SHIM}/g' $filename
    done
}

clean_backups() {
    BACKUP="$(pyenv root)/plugins/pyenv-multiuser/backup"
    rm "${BACKUP}/"*
}

update_multiuser() {
    STATUS=0
    echo "Restoring backups ..."
    restore_files
    clean_backups

    echo "Performing update ..."
    pyenv update
    STATUS="$?"

    if [ "$STATUS" != "0" ]; then
        return $STATUS
    fi

    ALTER_FILES=$(grep -lr '${PYENV_ROOT}/shims' $PYENV_ROOT)
    echo "Performing file backup ..."
    backup_files

    echo "Performing file alterations ..."
    alter_files
}

init_multiuser() {
    echo "Performing file backup ..."
    backup_files

    echo "Performing file alterations ..."
    alter_files
}

setup_shim_dir() {
    if [ ! -d "$PYENV_LOCAL_SHIM" ]; then
        echo -n "Directory '$PYENV_LOCAL_SHIM' does not exist. Would you like to create it now? [Y/n] "
        read YN
        YN=${YN:-y}

        case "$YN" in
            y | Y)
                mkdir $PYENV_LOCAL_SHIM
                ;;
            *)
                echo "You will need to create '$PYENV_LOCAL_SHIM' manually"
                ;;
        esac
    fi
}

user_init() {

    if [ -z "$PYENV_LOCAL_SHIM" ]; then
        echo -n "PYENV_LOCAL_SHIM not set. Would you like to use the default setting ($HOME/.pyenv_local_shim)? [Y/n] "
        read USE_DEFAULT
        USE_DEFAULT=${USE_DEFAULT:-y}

        case "$USE_DEFAULT" in
            y | Y)
                echo "# Add the following to your profile"
                echo "export PYENV_LOCAL_SHIM=$HOME/.pyenv_local_shim"
                echo
                PYENV_LOCAL_SHIM="$HOME/.pyenv_local_shim"
                export PYENV_LOCAL_SHIM
                setup_shim_dir
                ;;

            *)
                echo "# Add the following to your profile and replace '<PATH>' with your desired location path for your local shim directory"
                echo "export PYENV_LOCAL_SHIM=<PATH>"
                echo
        esac
    fi

    echo "# Example Profile Setup"
    echo '# export PYENV_LOCAL_SHIM="$HOME/.pyenv_local_shim"'
    echo '# export PATH="$PYENV_LOCAL_SHIM:$HOME/.pyenv/bin:$PATH"'
    echo '# eval "$(pyenv init -)"'
    echo '# eval "$(pyenv virtualenv-init -)"'
}

STATUS=0
shopt -s nullglob
PARAM=$1

case "$PARAM" in
    setup)
        init_multiuser
        ;;

    init)
        user_init
        ;;

    update)
        update_multiuser
        STATUS="$?"
        ;;

    *)
        echo "USAGE: pyenv multiuser [option]"
        echo "  OPTIONS:"
        echo "      setup        : used initialize the multiuser setup. Should only need done once per install"
        echo "      init         : initialize the shim path at the individual user level"
        echo "      update       : perform an update of pyenv accounting for the multiuser setup"
        ;;
esac

shopt -u nullglob
exit "$STATUS"
